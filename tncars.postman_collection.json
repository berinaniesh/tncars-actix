{
	"info": {
		"_postman_id": "0302d27a-47a3-47d7-a001-f9f14195cbf1",
		"name": "tncars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25957447"
	},
	"item": [
		{
			"name": "home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.greeting).to.exist;",
							"  pm.expect(responseData.about).to.exist;",
							"  pm.expect(responseData.authentication).to.exist;",
							"  pm.expect(responseData.framework).to.exist;",
							"  pm.expect(responseData.database).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Greeting is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.greeting).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"About is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.about).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Authentication is a boolean value\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.authentication).to.exist.and.to.be.a('boolean');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969"
				}
			},
			"response": []
		},
		{
			"name": "create_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"berinaniesh@gmail.com\",\r\n    \"username\": \"berinaniesh\",\r\n    \"password\": \"nanbenda\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:6969/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "login_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - jwt\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.jwt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"JWT should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.jwt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"jwt is a valid JSON Web Token (JWT)\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.jwt).to.be.a('string').and.to.match(/^\\w+\\.\\w+\\.\\w+$/);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"credential\": \"berinaniesh\",\r\n    \"password\": \"hehaha2\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:6969/users/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_current_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"});",
							"",
							"",
							"pm.test(\"Phone is null or in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.phone).to.satisfy(function (phone) {",
							"        return phone === null || /^[0-9]{10}$/.test(phone);",
							"    }, \"Phone should be null or a 10-digit number\");",
							"});",
							"",
							"",
							"pm.test(\"Credits is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.credits).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.credits).to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoyLCJleHAiOjE2OTAxMTA2OTF9.WjX_xNXjKz_xpMt4b-clbtTEITWLMmdC2ZGUzYgC5T4",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://localhost:6969/users/me",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "refreshtoken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'jwt'\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.jwt).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"The jwt field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.jwt).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"The 'jwt' field is a valid JSON Web Token (JWT)\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.jwt).to.exist.and.to.be.a('string');",
							"    // Add additional checks for JWT validation if needed",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/users/refreshtoken",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"refreshtoken"
					]
				}
			},
			"response": []
		},
		{
			"name": "emailotp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 500\", function () {",
							"    pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property(\"message\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response does not contain sensitive information\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.not.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/users/emailotp",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"emailotp"
					]
				}
			},
			"response": []
		},
		{
			"name": "verify_otp",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify URL parameter is correctly passed in the response message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.include(pm.variables.get(\"otp\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/verify/email/otp/7E3YL3Zd",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"verify",
						"email",
						"otp",
						"7E3YL3Zd"
					]
				}
			},
			"response": []
		},
		{
			"name": "verify_url",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string', \"Value should be a string\");",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the URL is correctly encoded\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.equal(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/verify/email/url/pncywrhy8dalu7n5sjaqcd9jkuouwvnzrm4r7stgjaspweq9t",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"verify",
						"email",
						"url",
						"pncywrhy8dalu7n5sjaqcd9jkuouwvnzrm4r7stgjaspweq9t"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.username).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Bio is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.bio).to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"heisen\",\n    \"last_name\": \"berg\",\n    \"bio\": \"Jesus is the way, the truth and life\",\n    \"address\": \"Earth\",\n    \"username\": \"bdfobo\",\n    \"email_public\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:6969/users/me",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "create_post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"The id field should be a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0, \"Value should be non-negative\");",
							"});",
							"",
							"",
							"pm.test(\"Validate 'title' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate user_id field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user_id).to.be.a('number');",
							"    pm.expect(responseData.user_id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Brand field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.brand).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"  first Post\",\n    \"brand\": \"mahindra\",\n    \"price\": 1234,\n    \"model_year\": 2000,\n    \"km_driven\": 10344,\n    \"transmission\": \"Manual\",\n    \"fuel\": \"Diesel\",\n    \"description\": \"Very Good vehicle\",\n    \"location\": \"thiruvattar\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:6969/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate id field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Validate the title field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.title).to.exist.and.to.be.a('string', \"Title should be a string\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the user_id field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user_id).to.exist.and.to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"The brand field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.brand).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/posts/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Message field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"The message field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Validate the format of the message field\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.match(/^[A-Z][a-z\\s]+[\\.!?]$/, \"Message should be a sentence or a specific pattern\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \" sdf\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:6969/posts/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"posts",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/users/me",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that post with ID 2 still exists in the database\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.equal(\"\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/posts/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"posts",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "undelete_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that 'users' array is not present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.users).to.not.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/users/undelete",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"undelete"
					]
				}
			},
			"response": []
		},
		{
			"name": "like",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"  });",
							"",
							"",
							"pm.test(\"Response has the required field 'message'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"The 'message' field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify request URL is correct\", function () {",
							"  pm.expect(pm.request.url).to.equal(\"http://localhost:6969/like/1\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/like/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"like",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "add_comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify request URL is correct\", function () {",
							"    pm.expect(pm.request.url).to.equal(\"http://localhost:6969/addcomment/1\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"comment\": \"bad car\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:6969/addcomment/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"addcomment",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response message is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.not.equal('');",
							"});",
							"",
							"",
							"pm.test(\"Response message is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/deletecomment/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"deletecomment",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit_comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"  pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify the request URL is correct\", function () {",
							"  pm.expect(pm.request.url).to.equal(\"http://localhost:6969/changecomment/1\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"comment\": \"indeed good car\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:6969/changecomment/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"changecomment",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response array is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    pm.expect(responseData).to.have.lengthOf(0, \"Array should be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response is not null\", function () {",
							"    pm.expect(pm.response.json()).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/posts/1/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"posts",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "is_username_available",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Message is equal to 'Username is available'\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.equal(\"Username is available\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/utils/usernameavailable/bobo",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"utils",
						"usernameavailable",
						"bobo"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_id_username_email",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/utils/idusernameemail/heisenberg",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"utils",
						"idusernameemail",
						"heisenberg"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_specific_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"The 'message' field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/users/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_posts_of_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/users/bdfobo/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"bdfobo",
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "add_follow",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'message'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify the request URL is correct\", function () {",
							"    pm.expect(pm.request.url).to.eql(\"http://localhost:6969/follow/user/beraddfniesh\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/follow/user/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"follow",
						"user",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "followed_by",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array\", function () {",
							"  pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response body is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response body has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/followedby/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"followedby",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "following",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response array is empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response is not null\", function () {",
							"    pm.expect(pm.response.json()).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/following/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"following",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_specific_comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Validate response format\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"  pm.expect(pm.response.json()).to.be.an('object');",
							"  pm.expect(pm.response.json().message).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/comment/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"comment",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload_profilepic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Response message is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response message is a string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.message).to.be.a('string');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": "/home/berinaniesh/Downloads/photo1689773688.jpeg"
						}
					]
				},
				"url": {
					"raw": "http://localhost:6969/upload/profilepic",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"upload",
						"profilepic"
					]
				}
			},
			"response": []
		},
		{
			"name": "forgot_password_email",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/users/forgotpassword/berinaniesh",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"forgotpassword",
						"berinaniesh"
					]
				}
			},
			"response": []
		},
		{
			"name": "change_password",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"otp\": \"BZCBBQJ\",\n    \"password\": \"nanbenda\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:6969/users/changepassword/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"changepassword",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "upload_post_primary_pic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": "/home/berinaniesh/Pictures/wallhaven-l83o92.jpg"
						}
					]
				},
				"url": {
					"raw": "http://localhost:6969/upload/postprimarypic/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"upload",
						"postprimarypic",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "post_pics",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"type": "file",
							"src": "/home/berinaniesh/Pictures/wallhaven-l83o92.jpg"
						}
					]
				},
				"url": {
					"raw": "http://localhost:6969/upload/postpics/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"upload",
						"postpics",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_images_of_post",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/posts/1/images",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"posts",
						"1",
						"images"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_post_image_by_id",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/postimages/11",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"postimages",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_post_primary_pic",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/posts/1/postpic",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"posts",
						"1",
						"postpic"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_profile_pic",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:6969/users/profilepic",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "6969",
					"path": [
						"users",
						"profilepic"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE2OTExOTUzNDB9.KVs-Y70MRyi3p8nlqJ1heiZ3Sx5PJm5jx7eoG4BF2u4",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}